package com.github.torissi.programmers;

public class Solution210819_1 {
    public long solution(long n) {
        long sqrt = (long) Math.sqrt(n);
        return Math.pow(sqrt, 2) == n ? (long) Math.pow(sqrt + 1, 2) : -1;
    }
}

/*정수 제곱근 판별
문제 설명
임의의 양의 정수 n에 대해, n이 어떤 양의 정수 x의 제곱인지 아닌지 판단하려 합니다.
n이 양의 정수 x의 제곱이라면 x+1의 제곱을 리턴하고, n이 양의 정수 x의 제곱이 아니라면 -1을 리턴하는 함수를 완성하세요.

제한 사항
n은 1이상, 50000000000000 이하인 양의 정수입니다.
입출력 예
n	return
121	144
3	-1
입출력 예 설명
입출력 예#1
121은 양의 정수 11의 제곱이므로, (11+1)를 제곱한 144를 리턴합니다.

입출력 예#2
3은 양의 정수의 제곱이 아니므로, -1을 리턴합니다.
*/

/*
테스트 1 〉	통과 (0.06ms, 56.7MB)
테스트 2 〉	통과 (0.03ms, 54.8MB)
테스트 3 〉	통과 (0.05ms, 58.1MB)
테스트 4 〉	통과 (0.05ms, 55.6MB)
테스트 5 〉	통과 (0.05ms, 56.3MB)
테스트 6 〉	통과 (0.05ms, 55.8MB)
테스트 7 〉	통과 (0.05ms, 55.7MB)
테스트 8 〉	통과 (0.05ms, 54.4MB)
테스트 9 〉	통과 (0.03ms, 56.3MB)
테스트 10 〉	통과 (0.04ms, 59.8MB)
테스트 11 〉	통과 (0.05ms, 70.5MB)
테스트 12 〉	통과 (0.06ms, 56.8MB)
테스트 13 〉	통과 (0.04ms, 57.7MB)
테스트 14 〉	통과 (0.06ms, 53.9MB)
테스트 15 〉	통과 (0.06ms, 57MB)
테스트 16 〉	통과 (0.05ms, 55.4MB)
테스트 17 〉	통과 (0.06ms, 58.1MB)
테스트 18 〉	통과 (0.06ms, 57.3MB)
=> 확실히 for문을 사용하지 않으니 훨씬 빨라짐.. 제곱근.. 기억하기...
*/


