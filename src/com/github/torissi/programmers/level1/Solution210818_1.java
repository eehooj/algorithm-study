package com.github.torissi.programmers.level1;

public class Solution210818_1 {
    public long solution(long num) {
        long temp = num;
        long count = 0;

        do {
            if (temp == 1) {
                break;
            } else if (temp % 2 == 0) {
                temp = temp / 2;
            } else {
                temp = (temp * 3) + 1;
            }
            count++;
        } while (count != 500);

        if (count == 500) {
            count = -1;
        }

        return count;
    }
}

/*콜라츠 추측
문제 설명
1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.

1-1. 입력된 수가 짝수라면 2로 나눕니다.
1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.
2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.
예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요. 단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.

제한 사항
입력된 수, num은 1 이상 8000000 미만인 정수입니다.
입출력 예
n	result
6	8
16	4
626331	-1
입출력 예 설명
입출력 예 #1
문제의 설명과 같습니다.

입출력 예 #2
16 -> 8 -> 4 -> 2 -> 1 이되어 총 4번만에 1이 됩니다.

입출력 예 #3
626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야합니다.
*/

/*
테스트 1 〉	통과 (0.06ms, 69MB)
테스트 2 〉	통과 (0.06ms, 72MB)
테스트 3 〉	통과 (0.06ms, 57.9MB)
테스트 4 〉	통과 (0.06ms, 60.1MB)
테스트 5 〉	통과 (0.08ms, 66.8MB)
테스트 6 〉	통과 (0.07ms, 59.7MB)
테스트 7 〉	통과 (0.09ms, 60.3MB)
테스트 8 〉	통과 (0.09ms, 73.9MB)
테스트 9 〉	통과 (0.06ms, 71.8MB)
테스트 10 〉	통과 (0.08ms, 62.2MB)
테스트 11 〉	통과 (0.12ms, 69.5MB)
테스트 12 〉	통과 (0.08ms, 60.5MB)
테스트 13 〉	통과 (0.09ms, 61.1MB)
테스트 14 〉	통과 (0.10ms, 58.1MB)
테스트 15 〉	통과 (0.07ms, 68.2MB)
테스트 16 〉	통과 (0.09ms, 58.3MB)*/


/*public long solution(long num) {
        long temp = num;

        for (int i = 0; i < 501; i++) {
            if (temp == 1) {
                return i;
            } else if (temp % 2 == 0) {
                temp = temp / 2;
            } else {
                temp = (temp * 3) + 1;
            }
        }

        return -1;
    }*/

/*테스트 1 〉	통과 (0.06ms, 62.5MB)
테스트 2 〉	통과 (0.06ms, 73.3MB)
테스트 3 〉	통과 (0.07ms, 73.7MB)
테스트 4 〉	통과 (0.10ms, 73.3MB)
테스트 5 〉	통과 (0.13ms, 73.9MB)
테스트 6 〉	통과 (0.10ms, 57.9MB)
테스트 7 〉	통과 (0.09ms, 74.3MB)
테스트 8 〉	통과 (0.07ms, 69.3MB)
테스트 9 〉	통과 (0.06ms, 59.5MB)
테스트 10 〉	통과 (0.19ms, 73.2MB)
테스트 11 〉	통과 (0.08ms, 68.4MB)
테스트 12 〉	통과 (0.09ms, 77.5MB)
테스트 13 〉	통과 (0.09ms, 75.3MB)
테스트 14 〉	통과 (0.07ms, 72.2MB)
테스트 15 〉	통과 (0.09ms, 75.9MB)
테스트 16 〉	통과 (0.07ms, 71.2MB)
=> for문이 while보다 빠른듯..? 메모리도 적게 잡네
*/