package com.github.torissi.programmers;

public class WeeklyTwo {
    public String solution(int[][] scores) {
        int length = scores.length;
        StringBuilder grade = new StringBuilder();

        for (int i = 0; i < length; i++) { //1
            int sum = 0;
            int maxj = 0;
            int minj = 101;
            int divide = length;

            for (int j = 0; j < length; j++) { //2
                int score = scores[j][i];
                sum += score; 

                if (i != j) { // 평균 계산시 오직 내가 준 내 점수가 min, max 값일 때에만 제외
                              // => 동일 min, max 값이 있다면 제외 X
                              // 동일한 min, max 값이 있을 수 있기 때문에 기준이 되는 scores[i][i]의 값은 빼고 min, max를 구한다
                              // scores[i][i]와 같은 값이 있을 경우에는 평균 계산에 사용 하기 때문에 일단 min, max 구하고 밑에서 비교
                              // 이 부분이 문제 쉽게 푸는 핵심인듯?
                    if (maxj < scores[j][i]) {
                        maxj = scores[j][i];
                    } else if (minj > scores[j][i]) {
                        minj = scores[j][i];
                    }
                }
            }

            if (scores[i][i] > maxj || scores[i][i] < minj) {
                sum -= scores[i][i];
                divide--;
            }

            double ave = (double) sum / divide;

            if (ave >= 90.0) grade.append("A");
            else if (ave >= 80.0) grade.append("B");
            else if (ave >= 70.0) grade.append("C");
            else if (ave >= 50.0) grade.append("D");
            else grade.append("F");
        }

        return grade.toString();
    }
}

/*문제 설명
대학 교수인 당신은, 상호평가를 통하여 학생들이 제출한 과제물에 학점을 부여하려고 합니다. 아래는 0번부터 4번까지 번호가 매겨진 5명의 학생들이 자신과 다른 학생의 과제를 평가한 점수표입니다.

No.	0	1	2	3	4
0	100	90	98	88	65
1	50	45	99	85	77
2	47	88	95	80	67
3	61	57	100	80	65
4	24	90	94	75	65
평균	45.5	81.25	97.2	81.6	67.8
학점	F	B	A	B	D
위의 점수표에서, i행 j열의 값은 i번 학생이 평가한 j번 학생의 과제 점수입니다.

0번 학생이 평가한 점수는 0번 행에담긴 [100, 90, 98, 88, 65]입니다.
0번 학생은 자기 자신에게 100점, 1번 학생에게 90점, 2번 학생에게 98점, 3번 학생에게 88점, 4번 학생에게 65점을 부여했습니다.
2번 학생이 평가한 점수는 2번 행에담긴 [47, 88, 95, 80, 67]입니다.
2번 학생은 0번 학생에게 47점, 1번 학생에게 88점, 자기 자신에게 95점, 3번 학생에게 80점, 4번 학생에게 67점을 부여했습니다.
당신은 각 학생들이 받은 점수의 평균을 구하여, 기준에 따라 학점을 부여하려고 합니다.
만약, 학생들이 자기 자신을 평가한 점수가 유일한 최고점 또는 유일한 최저점이라면 그 점수는 제외하고 평균을 구합니다.

0번 학생이 받은 점수는 0번 열에 담긴 [100, 50, 47, 61, 24]입니다. 자기 자신을 평가한 100점은 자신이 받은 점수 중에서 유일한 최고점이므로, 평균을 구할 때 제외합니다.
0번 학생의 평균 점수는 (50+47+61+24) / 4 = 45.5입니다.
4번 학생이 받은 점수는 4번 열에 담긴 [65, 77, 67, 65, 65]입니다. 자기 자신을 평가한 65점은 자신이 받은 점수 중에서 최저점이지만 같은 점수가 2개 더 있으므로, 유일한 최저점이 아닙니다. 따라서, 평균을 구할 때 제외하지 않습니다.
4번 학생의 평균 점수는 (65+77+67+65+65) / 5 = 67.8입니다.
제외할 점수는 제외하고 평균을 구한 후, 아래 기준에 따라 학점을 부여합니다.

평균	학점
90점 이상	A
80점 이상 90점 미만	B
70점 이상 80점 미만	C
50점 이상 70점 미만	D
50점 미만	F
학생들의 점수가 담긴 정수형 2차원 배열 scores가 매개변수로 주어집니다. 이때, 학생들의 학점을 구하여 하나의 문자열로 만들어서 return 하도록 solution 함수를 완성해주세요.

제한사항
2 ≤ scores의 행의 길이(학생 수) ≤ 10
scores의 열의 길이 = scores의 행의 길이
즉, scores는 행과 열의 길이가 같은 2차원 배열입니다.
0 ≤ scores의 원소 ≤ 100
return 값 형식
0번 학생의 학점부터 차례대로 이어 붙인 하나의 문자열을 return 합니다.
입출력 예
scores	result
[[100,90,98,88,65],[50,45,99,85,77],[47,88,95,80,67],[61,57,100,80,65],[24,90,94,75,65]]	"FBABD"
[[50,90],[50,87]]	"DA"
[[70,49,90],[68,50,38],[73,31,100]]	"CFD"
입출력 예 설명
입출력 예 #1

문제 예시와 같습니다.

입출력 예 #2

No.	0	1
0	50	90
1	50	87
평균	50	90
학점	D	A
1번 학생이 자기 자신을 평가한 87점은 [90, 87]에서 유일한 최저점이므로, 평균을 구할 때 제외합니다.
입출력 예 #3

No.	0	1	2
0	70	49	90
1	68	50	38
2	73	31	100
평균	70.33…	40	64
학점	C	F	D
1번 학생이 자기 자신을 평가한 50점은 [49, 50, 31]에서 유일한 최고점이므로, 평균을 구할 때 제외합니다.
2번 학생이 자기 자신을 평가한 100점은 [90, 38, 100]에서 유일한 최고점이므로, 평균을 구할 때 제외합니다.
*/

/*테스트 1 〉	통과 (0.03ms, 57.9MB)
테스트 2 〉	통과 (0.03ms, 69.8MB)
테스트 3 〉	통과 (0.03ms, 69.6MB)
테스트 4 〉	통과 (0.03ms, 71.1MB)
테스트 5 〉	통과 (0.04ms, 73.8MB)
테스트 6 〉	통과 (0.03ms, 69MB)
테스트 7 〉	통과 (0.03ms, 61.8MB)
테스트 8 〉	통과 (0.05ms, 60MB)
테스트 9 〉	통과 (0.03ms, 73.3MB)
테스트 10 〉	통과 (0.05ms, 74.9MB)
테스트 11 〉	통과 (0.04ms, 77.3MB)
테스트 12 〉	통과 (0.06ms, 57.2MB)
테스트 13 〉	통과 (0.02ms, 71.6MB)
테스트 14 〉	통과 (0.05ms, 74MB)
테스트 15 〉	통과 (0.04ms, 72.8MB)
테스트 16 〉	통과 (0.04ms, 73.3MB)
테스트 17 〉	통과 (0.03ms, 69.9MB)
테스트 18 〉	통과 (0.03ms, 71.7MB)
테스트 19 〉	통과 (0.03ms, 73.2MB)
테스트 20 〉	통과 (0.04ms, 74MB)
테스트 21 〉	통과 (0.03ms, 68MB)*/